node {
    {{ proxies }}
}

# Node group (outbound).
group {
    my_group {
        # No filter. Use all nodes.

        # Randomly select a node from the group for every connection.
        #policy: random

        # Select the first node from the group for every connection.
        #policy: fixed(0)

        # Select the node with min last latency from the group for every connection.
        #policy: min

        # Select the node with min moving average of latencies from the group for every connection.
        policy: min_moving_avg
    }

    group2 {
        # Filter nodes from the global node pool defined by the subscription and node section above.
        filter: subtag(regex: '^my_', another_sub) && !name(keyword: 'ExpireAt:')
        # Filter nodes from the global node pool defined by tag
        filter: name({{ proxies_names | render }})

        # Select the node with min average of the last 10 latencies from the group for every connection.
        policy: min_avg10
    }
}
# See https://github.com/daeuniverse/dae/blob/main/docs/routing.md for full examples.
routing {
    ### Preset rules.
    {{ pt('direct') | render }}
    # Network managers in localhost should be direct to avoid false negative network connectivity check when binding to
    # WAN.
    pname(NetworkManager) -> direct

    # Put it in the front to prevent broadcast, multicast and other packets that should be sent to the LAN from being
    # forwarded by the proxy.
    # "dip" means destination IP.
    dip(224.0.0.0/3, 'ff00::/8') -> direct

    # This line allows you to access private addresses directly instead of via your proxy. If you really want to access
    # private addresses in your proxy host network, modify the below line.
    dip(geoip:private) -> direct

    ### Write your rules below.

    dip(geoip:cn) -> direct
    domain(geosite:cn) -> direct

    fallback: my_group
}
